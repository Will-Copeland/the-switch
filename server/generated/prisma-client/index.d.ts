// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  switchEvent: (where?: SwitchEventWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  switchEvent: (where: SwitchEventWhereUniqueInput) => SwitchEventPromise;
  switchEvents: (
    args?: {
      where?: SwitchEventWhereInput;
      orderBy?: SwitchEventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<SwitchEvent>;
  switchEventsConnection: (
    args?: {
      where?: SwitchEventWhereInput;
      orderBy?: SwitchEventOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => SwitchEventConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createSwitchEvent: (data: SwitchEventCreateInput) => SwitchEventPromise;
  updateSwitchEvent: (
    args: { data: SwitchEventUpdateInput; where: SwitchEventWhereUniqueInput }
  ) => SwitchEventPromise;
  updateManySwitchEvents: (
    args: {
      data: SwitchEventUpdateManyMutationInput;
      where?: SwitchEventWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertSwitchEvent: (
    args: {
      where: SwitchEventWhereUniqueInput;
      create: SwitchEventCreateInput;
      update: SwitchEventUpdateInput;
    }
  ) => SwitchEventPromise;
  deleteSwitchEvent: (where: SwitchEventWhereUniqueInput) => SwitchEventPromise;
  deleteManySwitchEvents: (
    where?: SwitchEventWhereInput
  ) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  switchEvent: (
    where?: SwitchEventSubscriptionWhereInput
  ) => SwitchEventSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SwitchEventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "time_ASC"
  | "time_DESC"
  | "switchState_ASC"
  | "switchState_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface SwitchEventCreateInput {
  time: DateTimeInput;
  switchState: Boolean;
}

export interface SwitchEventUpdateInput {
  time?: DateTimeInput;
  switchState?: Boolean;
}

export interface SwitchEventWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  time?: DateTimeInput;
  time_not?: DateTimeInput;
  time_in?: DateTimeInput[] | DateTimeInput;
  time_not_in?: DateTimeInput[] | DateTimeInput;
  time_lt?: DateTimeInput;
  time_lte?: DateTimeInput;
  time_gt?: DateTimeInput;
  time_gte?: DateTimeInput;
  switchState?: Boolean;
  switchState_not?: Boolean;
  AND?: SwitchEventWhereInput[] | SwitchEventWhereInput;
  OR?: SwitchEventWhereInput[] | SwitchEventWhereInput;
  NOT?: SwitchEventWhereInput[] | SwitchEventWhereInput;
}

export interface SwitchEventUpdateManyMutationInput {
  time?: DateTimeInput;
  switchState?: Boolean;
}

export interface SwitchEventSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SwitchEventWhereInput;
  AND?: SwitchEventSubscriptionWhereInput[] | SwitchEventSubscriptionWhereInput;
  OR?: SwitchEventSubscriptionWhereInput[] | SwitchEventSubscriptionWhereInput;
  NOT?: SwitchEventSubscriptionWhereInput[] | SwitchEventSubscriptionWhereInput;
}

export type SwitchEventWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface SwitchEventEdge {
  node: SwitchEvent;
  cursor: String;
}

export interface SwitchEventEdgePromise
  extends Promise<SwitchEventEdge>,
    Fragmentable {
  node: <T = SwitchEventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SwitchEventEdgeSubscription
  extends Promise<AsyncIterator<SwitchEventEdge>>,
    Fragmentable {
  node: <T = SwitchEventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SwitchEventPreviousValues {
  id: ID_Output;
  time: DateTimeOutput;
  switchState: Boolean;
}

export interface SwitchEventPreviousValuesPromise
  extends Promise<SwitchEventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  time: () => Promise<DateTimeOutput>;
  switchState: () => Promise<Boolean>;
}

export interface SwitchEventPreviousValuesSubscription
  extends Promise<AsyncIterator<SwitchEventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  switchState: () => Promise<AsyncIterator<Boolean>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateSwitchEvent {
  count: Int;
}

export interface AggregateSwitchEventPromise
  extends Promise<AggregateSwitchEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSwitchEventSubscription
  extends Promise<AsyncIterator<AggregateSwitchEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SwitchEventSubscriptionPayload {
  mutation: MutationType;
  node: SwitchEvent;
  updatedFields: String[];
  previousValues: SwitchEventPreviousValues;
}

export interface SwitchEventSubscriptionPayloadPromise
  extends Promise<SwitchEventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SwitchEventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SwitchEventPreviousValuesPromise>() => T;
}

export interface SwitchEventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SwitchEventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SwitchEventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SwitchEventPreviousValuesSubscription>() => T;
}

export interface SwitchEvent {
  id: ID_Output;
  time: DateTimeOutput;
  switchState: Boolean;
}

export interface SwitchEventPromise extends Promise<SwitchEvent>, Fragmentable {
  id: () => Promise<ID_Output>;
  time: () => Promise<DateTimeOutput>;
  switchState: () => Promise<Boolean>;
}

export interface SwitchEventSubscription
  extends Promise<AsyncIterator<SwitchEvent>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  time: () => Promise<AsyncIterator<DateTimeOutput>>;
  switchState: () => Promise<AsyncIterator<Boolean>>;
}

export interface SwitchEventConnection {
  pageInfo: PageInfo;
  edges: SwitchEventEdge[];
}

export interface SwitchEventConnectionPromise
  extends Promise<SwitchEventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SwitchEventEdge>>() => T;
  aggregate: <T = AggregateSwitchEventPromise>() => T;
}

export interface SwitchEventConnectionSubscription
  extends Promise<AsyncIterator<SwitchEventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SwitchEventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSwitchEventSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "SwitchEvent",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
