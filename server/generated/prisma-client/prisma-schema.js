module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateSwitchEvent {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createSwitchEvent(data: SwitchEventCreateInput!): SwitchEvent!
  updateSwitchEvent(data: SwitchEventUpdateInput!, where: SwitchEventWhereUniqueInput!): SwitchEvent
  updateManySwitchEvents(data: SwitchEventUpdateManyMutationInput!, where: SwitchEventWhereInput): BatchPayload!
  upsertSwitchEvent(where: SwitchEventWhereUniqueInput!, create: SwitchEventCreateInput!, update: SwitchEventUpdateInput!): SwitchEvent!
  deleteSwitchEvent(where: SwitchEventWhereUniqueInput!): SwitchEvent
  deleteManySwitchEvents(where: SwitchEventWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  switchEvent(where: SwitchEventWhereUniqueInput!): SwitchEvent
  switchEvents(where: SwitchEventWhereInput, orderBy: SwitchEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SwitchEvent]!
  switchEventsConnection(where: SwitchEventWhereInput, orderBy: SwitchEventOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SwitchEventConnection!
  node(id: ID!): Node
}

type Subscription {
  switchEvent(where: SwitchEventSubscriptionWhereInput): SwitchEventSubscriptionPayload
}

type SwitchEvent {
  id: ID!
  time: DateTime!
  switchState: Boolean!
}

type SwitchEventConnection {
  pageInfo: PageInfo!
  edges: [SwitchEventEdge]!
  aggregate: AggregateSwitchEvent!
}

input SwitchEventCreateInput {
  time: DateTime!
  switchState: Boolean!
}

type SwitchEventEdge {
  node: SwitchEvent!
  cursor: String!
}

enum SwitchEventOrderByInput {
  id_ASC
  id_DESC
  time_ASC
  time_DESC
  switchState_ASC
  switchState_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SwitchEventPreviousValues {
  id: ID!
  time: DateTime!
  switchState: Boolean!
}

type SwitchEventSubscriptionPayload {
  mutation: MutationType!
  node: SwitchEvent
  updatedFields: [String!]
  previousValues: SwitchEventPreviousValues
}

input SwitchEventSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SwitchEventWhereInput
  AND: [SwitchEventSubscriptionWhereInput!]
  OR: [SwitchEventSubscriptionWhereInput!]
  NOT: [SwitchEventSubscriptionWhereInput!]
}

input SwitchEventUpdateInput {
  time: DateTime
  switchState: Boolean
}

input SwitchEventUpdateManyMutationInput {
  time: DateTime
  switchState: Boolean
}

input SwitchEventWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  time: DateTime
  time_not: DateTime
  time_in: [DateTime!]
  time_not_in: [DateTime!]
  time_lt: DateTime
  time_lte: DateTime
  time_gt: DateTime
  time_gte: DateTime
  switchState: Boolean
  switchState_not: Boolean
  AND: [SwitchEventWhereInput!]
  OR: [SwitchEventWhereInput!]
  NOT: [SwitchEventWhereInput!]
}

input SwitchEventWhereUniqueInput {
  id: ID
}
`
      }
    